{"ast":null,"code":"import axios from \"axios\";\nimport { GET_LOGS, SET_LOADING, LOGS_ERROR, ADD_LOG, DELETE_LOG, UPDATE_LOG, SET_CURRENT, CLEAR_CURRENT } from \"./types\"; // export const getLogs = () =>  (dispatch) => {\n//     dispatch(setLoading());\n//     axios\n//     .get(\"/api/logs\")\n//     .then(res =>\n//       dispatch({\n//         type: GET_LOGS,\n//         payload: res.data\n//     })\n//   ) catch (error) {\n//     dispatch({\n//       type: LOGS_ERROR,\n//       payload: error.res.data,\n//     });\n// };\n\nexport const getLogs = () => dispatch => {\n  dispatch(setLoading());\n  axios.get(\"/api/logs\").then(res => dispatch({\n    type: GET_LOGS,\n    payload: res.data\n  })).catch(err => dispatch({\n    type: GET_LOGS,\n    payload: err.res.data\n  }));\n};\nexport const addLog = log => dispatch => {\n  dispatch(setLoading());\n  axios.post(\"/api/logs\", log).then(res => dispatch({\n    type: ADD_LOG,\n    payload: res.data\n  })).catch(err => dispatch({\n    type: LOGS_ERROR,\n    payload: err.response.statusText\n  }));\n};\nexport const deleteLog = id => dispatch => {\n  setLoading();\n  axios.delete(`/api/logs/${id}`).then(res => dispatch({\n    type: DELETE_LOG,\n    payload: res.id\n  })).catch(error => dispatch({\n    type: LOGS_ERROR,\n    //since you dont have the res variable, us response\n    payload: error.response.data\n  }));\n}; // keep current log in order to edit\n\nexport const setCurrent = log => {\n  return {\n    type: SET_CURRENT,\n    payload: log\n  };\n};\nexport const updateLog = log => dispatch => {\n  setLoading();\n  axios.put(`/api/logs/${log.id}`).then(res => dispatch({\n    type: UPDATE_LOG,\n    payload: res.data\n  })).catch(error => dispatch({\n    type: LOGS_ERROR,\n    payload: error.response.statusText\n  }));\n};\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"sources":["C:/Users/17025/Documents/zaxximo/client/src/actions/logActions.js"],"names":["axios","GET_LOGS","SET_LOADING","LOGS_ERROR","ADD_LOG","DELETE_LOG","UPDATE_LOG","SET_CURRENT","CLEAR_CURRENT","getLogs","dispatch","setLoading","get","then","res","type","payload","data","catch","err","addLog","log","post","response","statusText","deleteLog","id","delete","error","setCurrent","updateLog","put"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,QADF,EAEEC,WAFF,EAGEC,UAHF,EAIEC,OAJF,EAKEC,UALF,EAMEC,UANF,EAOEC,WAPF,EAQEC,aARF,QASO,SATP,C,CAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMC,OAAO,GAAG,MAAOC,QAAD,IAAc;AACzCA,EAAAA,QAAQ,CAACC,UAAU,EAAX,CAAR;AACAX,EAAAA,KAAK,CACFY,GADH,CACO,WADP,EAEGC,IAFH,CAESC,GAAD,IACJJ,QAAQ,CAAC;AACPK,IAAAA,IAAI,EAAEd,QADC;AAEPe,IAAAA,OAAO,EAAEF,GAAG,CAACG;AAFN,GAAD,CAHZ,EAQGC,KARH,CAQUC,GAAD,IACLT,QAAQ,CAAC;AACPK,IAAAA,IAAI,EAAEd,QADC;AAEPe,IAAAA,OAAO,EAAEG,GAAG,CAACL,GAAJ,CAAQG;AAFV,GAAD,CATZ;AAcD,CAhBM;AAkBP,OAAO,MAAMG,MAAM,GAAIC,GAAD,IAAUX,QAAD,IAAc;AAC3CA,EAAAA,QAAQ,CAACC,UAAU,EAAX,CAAR;AAEAX,EAAAA,KAAK,CACFsB,IADH,CACQ,WADR,EACqBD,GADrB,EAEGR,IAFH,CAESC,GAAD,IACJJ,QAAQ,CAAC;AACPK,IAAAA,IAAI,EAAEX,OADC;AAEPY,IAAAA,OAAO,EAAEF,GAAG,CAACG;AAFN,GAAD,CAHZ,EAQGC,KARH,CAQUC,GAAD,IACLT,QAAQ,CAAC;AACPK,IAAAA,IAAI,EAAEZ,UADC;AAEPa,IAAAA,OAAO,EAAEG,GAAG,CAACI,QAAJ,CAAaC;AAFf,GAAD,CATZ;AAcD,CAjBM;AAkBP,OAAO,MAAMC,SAAS,GAAIC,EAAD,IAAShB,QAAD,IAAc;AAC7CC,EAAAA,UAAU;AAEVX,EAAAA,KAAK,CACF2B,MADH,CACW,aAAYD,EAAG,EAD1B,EAEGb,IAFH,CAESC,GAAD,IACJJ,QAAQ,CAAC;AACPK,IAAAA,IAAI,EAAEV,UADC;AAEPW,IAAAA,OAAO,EAAEF,GAAG,CAACY;AAFN,GAAD,CAHZ,EASGR,KATH,CASUU,KAAD,IACLlB,QAAQ,CAAC;AACPK,IAAAA,IAAI,EAAEZ,UADC;AAEP;AACAa,IAAAA,OAAO,EAAEY,KAAK,CAACL,QAAN,CAAeN;AAHjB,GAAD,CAVZ;AAgBD,CAnBM,C,CAoBP;;AACA,OAAO,MAAMY,UAAU,GAAIR,GAAD,IAAS;AACjC,SAAO;AACLN,IAAAA,IAAI,EAAER,WADD;AAELS,IAAAA,OAAO,EAAEK;AAFJ,GAAP;AAID,CALM;AAMP,OAAO,MAAMS,SAAS,GAAIT,GAAD,IAAUX,QAAD,IAAc;AAC9CC,EAAAA,UAAU;AAEVX,EAAAA,KAAK,CACF+B,GADH,CACQ,aAAYV,GAAG,CAACK,EAAG,EAD3B,EAEGb,IAFH,CAESC,GAAD,IACJJ,QAAQ,CAAC;AACPK,IAAAA,IAAI,EAAET,UADC;AAEPU,IAAAA,OAAO,EAAEF,GAAG,CAACG;AAFN,GAAD,CAHZ,EAQGC,KARH,CAQUU,KAAD,IACLlB,QAAQ,CAAC;AACPK,IAAAA,IAAI,EAAEZ,UADC;AAEPa,IAAAA,OAAO,EAAEY,KAAK,CAACL,QAAN,CAAeC;AAFjB,GAAD,CATZ;AAcD,CAjBM;AAkBP,OAAO,MAAMb,UAAU,GAAG,MAAM;AAC9B,SAAO;AACLI,IAAAA,IAAI,EAAEb;AADD,GAAP;AAGD,CAJM","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  GET_LOGS,\r\n  SET_LOADING,\r\n  LOGS_ERROR,\r\n  ADD_LOG,\r\n  DELETE_LOG,\r\n  UPDATE_LOG,\r\n  SET_CURRENT,\r\n  CLEAR_CURRENT,\r\n} from \"./types\";\r\n\r\n// export const getLogs = () =>  (dispatch) => {\r\n\r\n//     dispatch(setLoading());\r\n//     axios\r\n//     .get(\"/api/logs\")\r\n//     .then(res =>\r\n//       dispatch({\r\n//         type: GET_LOGS,\r\n//         payload: res.data\r\n//     })\r\n\r\n//   ) catch (error) {\r\n//     dispatch({\r\n//       type: LOGS_ERROR,\r\n//       payload: error.res.data,\r\n//     });\r\n\r\n// };\r\nexport const getLogs = () => (dispatch) => {\r\n  dispatch(setLoading());\r\n  axios\r\n    .get(\"/api/logs\")\r\n    .then((res) =>\r\n      dispatch({\r\n        type: GET_LOGS,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_LOGS,\r\n        payload: err.res.data,\r\n      })\r\n    );\r\n};\r\n\r\nexport const addLog = (log) => (dispatch) => {\r\n  dispatch(setLoading());\r\n\r\n  axios\r\n    .post(\"/api/logs\", log)\r\n    .then((res) =>\r\n      dispatch({\r\n        type: ADD_LOG,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: LOGS_ERROR,\r\n        payload: err.response.statusText,\r\n      })\r\n    );\r\n};\r\nexport const deleteLog = (id) => (dispatch) => {\r\n  setLoading();\r\n\r\n  axios\r\n    .delete(`/api/logs/${id}`)\r\n    .then((res) =>\r\n      dispatch({\r\n        type: DELETE_LOG,\r\n        payload: res.id,\r\n      })\r\n    )\r\n\r\n    .catch((error) =>\r\n      dispatch({\r\n        type: LOGS_ERROR,\r\n        //since you dont have the res variable, us response\r\n        payload: error.response.data,\r\n      })\r\n    );\r\n};\r\n// keep current log in order to edit\r\nexport const setCurrent = (log) => {\r\n  return {\r\n    type: SET_CURRENT,\r\n    payload: log,\r\n  };\r\n};\r\nexport const updateLog = (log) => (dispatch) => {\r\n  setLoading();\r\n\r\n  axios\r\n    .put(`/api/logs/${log.id}`)\r\n    .then((res) =>\r\n      dispatch({\r\n        type: UPDATE_LOG,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .catch((error) =>\r\n      dispatch({\r\n        type: LOGS_ERROR,\r\n        payload: error.response.statusText,\r\n      })\r\n    );\r\n};\r\nexport const setLoading = () => {\r\n  return {\r\n    type: SET_LOADING,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}