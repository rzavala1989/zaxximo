{"ast":null,"code":"import axios from \"axios\";\nimport { GET_LOGS, SET_LOADING, LOGS_ERROR, ADD_LOG, DELETE_LOG, UPDATE_LOG, SET_CURRENT, CLEAR_CURRENT } from \"./types\"; // export const getLogs = () =>  (dispatch) => {\n//     dispatch(setLoading());\n//     axios\n//     .get(\"/api/logs\")\n//     .then(res =>\n//       dispatch({\n//         type: GET_LOGS,\n//         payload: res.data\n//     })\n//   ) catch (error) {\n//     dispatch({\n//       type: LOGS_ERROR,\n//       payload: error.res.data,\n//     });\n// };\n// export const getLogs = () => (dispatch) => {\n//   dispatch(setLoading());\n//   axios\n//     .get(\"/api/logs\")\n//     .then((res) =>\n//       dispatch({\n//         type: GET_LOGS,\n//         payload: res.data,\n//       })\n//     )\n//     .catch((err) =>\n//       dispatch({\n//         type: GET_LOGS,\n//         payload: err.res.data,\n//       })\n//     );\n// };\n\nexport const getLogs = () => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"/api/logs\");\n    const data = await res.json();\n    dispatch({\n      type: GET_LOGS,\n      payload: data.data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err\n    });\n  }\n}; // export const addLog = (log) => (dispatch) => {\n//   dispatch(setLoading());\n//   axios\n//     .post(\"/api/logs\", log)\n//     .then((res) =>\n//       dispatch({\n//         type: ADD_LOG,\n//         payload: res.data,\n//       })\n//     )\n//     .catch((err) =>\n//       dispatch({\n//         type: LOGS_ERROR,\n//         payload: err.response.statusText,\n//       })\n//     );\n// };\n\nexport const addLog = log => async dispatch => {\n  try {\n    setLoading();\n    log.date = new Date();\n    const res = await fetch(\"/api/logs\", {\n      method: \"post\",\n      body: JSON.stringify(log),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: ADD_LOG,\n      payload: data.data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err\n    });\n  }\n}; // export const deleteLog = (id) => (dispatch) => {\n//   setLoading();\n//   axios\n//     .delete(`/api/logs/${id}`)\n//     .then((res) =>\n//       dispatch({\n//         type: DELETE_LOG,\n//         payload: res.id,\n//       })\n//     )\n//     .catch((error) =>\n//       dispatch({\n//         type: LOGS_ERROR,\n//         //since you dont have the res variable, us response\n//         payload: error.response.data,\n//       })\n//     );\n// };\n\nexport const deleteLog = id => async dispatch => {\n  try {\n    setLoading();\n    await fetch(`/api/logs/${id}`, {\n      method: \"delete\"\n    });\n    dispatch({\n      type: DELETE_LOG,\n      payload: id\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err\n    });\n  }\n}; // keep current log in order to edit\n\nexport const setCurrent = log => {\n  return {\n    type: SET_CURRENT,\n    payload: log\n  };\n}; // export const updateLog = (log) => (dispatch) => {\n//   setLoading();\n//   axios\n//     .put(`/api/logs/${log.id}`)\n//     .then((res) =>\n//       dispatch({\n//         type: UPDATE_LOG,\n//         payload: res.data,\n//       })\n//     )\n//     .catch((error) =>\n//       dispatch({\n//         type: LOGS_ERROR,\n//         payload: error.response.statusText,\n//       })\n//     );\n// };\n\nexport const updateLog = log => async dispatch => {\n  try {\n    setLoading();\n    const {\n      message,\n      attention,\n      staff,\n      id\n    } = log;\n    log.date = new Date();\n    const res = await fetch(`/api/logs/${id}`, {\n      method: \"put\",\n      body: JSON.stringify({\n        message,\n        attention,\n        staff\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: UPDATE_LOG,\n      payload: data.data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err\n    });\n  }\n};\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"sources":["C:/Users/17025/Documents/zaxximo/client/src/actions/logActions.js"],"names":["axios","GET_LOGS","SET_LOADING","LOGS_ERROR","ADD_LOG","DELETE_LOG","UPDATE_LOG","SET_CURRENT","CLEAR_CURRENT","getLogs","dispatch","setLoading","res","fetch","data","json","type","payload","err","addLog","log","date","Date","method","body","JSON","stringify","headers","deleteLog","id","setCurrent","updateLog","message","attention","staff"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  GET_LOGS,\r\n  SET_LOADING,\r\n  LOGS_ERROR,\r\n  ADD_LOG,\r\n  DELETE_LOG,\r\n  UPDATE_LOG,\r\n  SET_CURRENT,\r\n  CLEAR_CURRENT,\r\n} from \"./types\";\r\n\r\n// export const getLogs = () =>  (dispatch) => {\r\n\r\n//     dispatch(setLoading());\r\n//     axios\r\n//     .get(\"/api/logs\")\r\n//     .then(res =>\r\n//       dispatch({\r\n//         type: GET_LOGS,\r\n//         payload: res.data\r\n//     })\r\n\r\n//   ) catch (error) {\r\n//     dispatch({\r\n//       type: LOGS_ERROR,\r\n//       payload: error.res.data,\r\n//     });\r\n\r\n// };\r\n// export const getLogs = () => (dispatch) => {\r\n//   dispatch(setLoading());\r\n//   axios\r\n//     .get(\"/api/logs\")\r\n//     .then((res) =>\r\n//       dispatch({\r\n//         type: GET_LOGS,\r\n//         payload: res.data,\r\n//       })\r\n//     )\r\n//     .catch((err) =>\r\n//       dispatch({\r\n//         type: GET_LOGS,\r\n//         payload: err.res.data,\r\n//       })\r\n//     );\r\n// };\r\nexport const getLogs = () => async (dispatch) => {\r\n  try {\r\n    setLoading();\r\n\r\n    const res = await fetch(\"/api/logs\");\r\n    const data = await res.json();\r\n\r\n    dispatch({ type: GET_LOGS, payload: data.data });\r\n  } catch (err) {\r\n    dispatch({ type: LOGS_ERROR, payload: err });\r\n  }\r\n};\r\n\r\n// export const addLog = (log) => (dispatch) => {\r\n//   dispatch(setLoading());\r\n\r\n//   axios\r\n//     .post(\"/api/logs\", log)\r\n//     .then((res) =>\r\n//       dispatch({\r\n//         type: ADD_LOG,\r\n//         payload: res.data,\r\n//       })\r\n//     )\r\n//     .catch((err) =>\r\n//       dispatch({\r\n//         type: LOGS_ERROR,\r\n//         payload: err.response.statusText,\r\n//       })\r\n//     );\r\n// };\r\n\r\nexport const addLog = (log) => async (dispatch) => {\r\n  try {\r\n    setLoading();\r\n    log.date = new Date();\r\n    const res = await fetch(\"/api/logs\", {\r\n      method: \"post\",\r\n      body: JSON.stringify(log),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n    const data = await res.json();\r\n\r\n    dispatch({ type: ADD_LOG, payload: data.data });\r\n  } catch (err) {\r\n    dispatch({ type: LOGS_ERROR, payload: err });\r\n  }\r\n};\r\n\r\n// export const deleteLog = (id) => (dispatch) => {\r\n//   setLoading();\r\n\r\n//   axios\r\n//     .delete(`/api/logs/${id}`)\r\n//     .then((res) =>\r\n//       dispatch({\r\n//         type: DELETE_LOG,\r\n//         payload: res.id,\r\n//       })\r\n//     )\r\n\r\n//     .catch((error) =>\r\n//       dispatch({\r\n//         type: LOGS_ERROR,\r\n//         //since you dont have the res variable, us response\r\n//         payload: error.response.data,\r\n//       })\r\n//     );\r\n// };\r\n\r\nexport const deleteLog = (id) => async (dispatch) => {\r\n  try {\r\n    setLoading();\r\n\r\n    await fetch(`/api/logs/${id}`, {\r\n      method: \"delete\",\r\n    });\r\n\r\n    dispatch({ type: DELETE_LOG, payload: id });\r\n  } catch (err) {\r\n    dispatch({ type: LOGS_ERROR, payload: err });\r\n  }\r\n};\r\n\r\n// keep current log in order to edit\r\nexport const setCurrent = (log) => {\r\n  return {\r\n    type: SET_CURRENT,\r\n    payload: log,\r\n  };\r\n};\r\n\r\n// export const updateLog = (log) => (dispatch) => {\r\n//   setLoading();\r\n\r\n//   axios\r\n//     .put(`/api/logs/${log.id}`)\r\n//     .then((res) =>\r\n//       dispatch({\r\n//         type: UPDATE_LOG,\r\n//         payload: res.data,\r\n//       })\r\n//     )\r\n//     .catch((error) =>\r\n//       dispatch({\r\n//         type: LOGS_ERROR,\r\n//         payload: error.response.statusText,\r\n//       })\r\n//     );\r\n// };\r\n\r\nexport const updateLog = (log) => async (dispatch) => {\r\n  try {\r\n    setLoading();\r\n    const { message, attention, staff, id } = log;\r\n    log.date = new Date();\r\n    const res = await fetch(`/api/logs/${id}`, {\r\n      method: \"put\",\r\n      body: JSON.stringify({ message, attention, staff }),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n    const data = await res.json();\r\n\r\n    dispatch({ type: UPDATE_LOG, payload: data.data });\r\n  } catch (err) {\r\n    dispatch({ type: LOGS_ERROR, payload: err });\r\n  }\r\n};\r\n\r\nexport const setLoading = () => {\r\n  return {\r\n    type: SET_LOADING,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}