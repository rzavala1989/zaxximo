{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/17025/Documents/zaxximo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/17025/Documents/zaxximo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from\"axios\";import{GET_LOGS,SET_LOADING,LOGS_ERROR,ADD_LOG,DELETE_LOG,UPDATE_LOG,SET_CURRENT,CLEAR_CURRENT}from\"./types\";// export const getLogs = () =>  (dispatch) => {\n//     dispatch(setLoading());\n//     axios\n//     .get(\"/api/logs\")\n//     .then(res =>\n//       dispatch({\n//         type: GET_LOGS,\n//         payload: res.data\n//     })\n//   ) catch (error) {\n//     dispatch({\n//       type: LOGS_ERROR,\n//       payload: error.res.data,\n//     });\n// };\nexport var getLogs=function getLogs(){return function(dispatch){dispatch(setLoading());axios.get(\"/api/logs\").then(function(res){return dispatch({type:GET_LOGS,payload:res.data});}).catch(function(err){return dispatch({type:GET_LOGS,payload:err.res.data});});};};// export const getLogs = () => async (dispatch) => {\n//   try {\n//     setLoading();\n//     const res = await fetch(\"/api/logs\");\n//     const data = await res.json();\n//     dispatch({ type: GET_LOGS, payload: data.data });\n//   } catch (err) {\n//     dispatch({ type: LOGS_ERROR, payload: err });\n//   }\n// };\n// export const addLog = (log) => (dispatch) => {\n//   dispatch(setLoading());\n//   axios\n//     .post(\"/api/logs\", log)\n//     .then((res) =>\n//       dispatch({\n//         type: ADD_LOG,\n//         payload: res.data,\n//       })\n//     )\n//     .catch((err) =>\n//       dispatch({\n//         type: LOGS_ERROR,\n//         payload: err.response.statusText,\n//       })\n//     );\n// };\nexport var addLog=function addLog(log){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var res,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;setLoading();log.date=new Date();_context.next=5;return fetch(\"/api/logs\",{method:\"post\",body:JSON.stringify(log),headers:{\"Content-Type\":\"application/json\"}});case 5:res=_context.sent;_context.next=8;return res.json();case 8:data=_context.sent;dispatch({type:ADD_LOG,payload:data.data});_context.next=15;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](0);dispatch({type:LOGS_ERROR,payload:_context.t0});case 15:case\"end\":return _context.stop();}}},_callee,null,[[0,12]]);}));return function(_x){return _ref.apply(this,arguments);};}();};export var deleteLog=function deleteLog(id){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;setLoading();_context2.next=4;return fetch(\"/api/logs/\".concat(id),{method:\"delete\"});case 4:dispatch({type:DELETE_LOG,payload:id});_context2.next=10;break;case 7:_context2.prev=7;_context2.t0=_context2[\"catch\"](0);dispatch({type:LOGS_ERROR,payload:_context2.t0});case 10:case\"end\":return _context2.stop();}}},_callee2,null,[[0,7]]);}));return function(_x2){return _ref2.apply(this,arguments);};}();};// export const deleteLog = (id) => async (dispatch) => {\n//   try {\n//     setLoading();\n//     await fetch(`/api/logs/${id}`, {\n//       method: \"delete\",\n//     });\n//     dispatch({ type: DELETE_LOG, payload: id });\n//   } catch (err) {\n//     dispatch({ type: LOGS_ERROR, payload: err });\n//   }\n// };\n// keep current log in order to edit\nexport var setCurrent=function setCurrent(log){return{type:SET_CURRENT,payload:log};};// export const updateLog = (log) => (dispatch) => {\n//   setLoading();\n//   axios\n//     .put(`/api/logs/${log.id}`)\n//     .then((res) =>\n//       dispatch({\n//         type: UPDATE_LOG,\n//         payload: res.data,\n//       })\n//     )\n//     .catch((error) =>\n//       dispatch({\n//         type: LOGS_ERROR,\n//         payload: error.response.statusText,\n//       })\n//     );\n// };\nexport var updateLog=function updateLog(log){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){var message,attention,staff,id,res,data;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;setLoading();message=log.message,attention=log.attention,staff=log.staff,id=log.id;log.date=new Date();_context3.next=6;return fetch(\"/api/logs/\".concat(id),{method:\"put\",body:JSON.stringify({message:message,attention:attention,staff:staff}),headers:{\"Content-Type\":\"application/json\"}});case 6:res=_context3.sent;_context3.next=9;return res.json();case 9:data=_context3.sent;dispatch({type:UPDATE_LOG,payload:data.data});_context3.next=16;break;case 13:_context3.prev=13;_context3.t0=_context3[\"catch\"](0);dispatch({type:LOGS_ERROR,payload:_context3.t0});case 16:case\"end\":return _context3.stop();}}},_callee3,null,[[0,13]]);}));return function(_x3){return _ref3.apply(this,arguments);};}();};// export const updateLog = (log) => async (dispatch) => {\n//   const config = {\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//     },\n//   };\n//   try {\n//     const res = await axios.put(`/api/logs/${log._id}`, log, config);\n//     dispatch({\n//       type: UPDATE_LOG,\n//       payload: res.data,\n//     });\n//   } catch (err) {\n//     dispatch({\n//       type: LOGS_ERROR,\n//       payload: err.response.msg,\n//     });\n//   }\n// };\nexport var setLoading=function setLoading(){return{type:SET_LOADING};};","map":{"version":3,"sources":["C:/Users/17025/Documents/zaxximo/client/src/actions/logActions.js"],"names":["axios","GET_LOGS","SET_LOADING","LOGS_ERROR","ADD_LOG","DELETE_LOG","UPDATE_LOG","SET_CURRENT","CLEAR_CURRENT","getLogs","dispatch","setLoading","get","then","res","type","payload","data","catch","err","addLog","log","date","Date","fetch","method","body","JSON","stringify","headers","json","deleteLog","id","setCurrent","updateLog","message","attention","staff"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  GET_LOGS,\r\n  SET_LOADING,\r\n  LOGS_ERROR,\r\n  ADD_LOG,\r\n  DELETE_LOG,\r\n  UPDATE_LOG,\r\n  SET_CURRENT,\r\n  CLEAR_CURRENT,\r\n} from \"./types\";\r\n\r\n// export const getLogs = () =>  (dispatch) => {\r\n\r\n//     dispatch(setLoading());\r\n//     axios\r\n//     .get(\"/api/logs\")\r\n//     .then(res =>\r\n//       dispatch({\r\n//         type: GET_LOGS,\r\n//         payload: res.data\r\n//     })\r\n\r\n//   ) catch (error) {\r\n//     dispatch({\r\n//       type: LOGS_ERROR,\r\n//       payload: error.res.data,\r\n//     });\r\n\r\n// };\r\nexport const getLogs = () => (dispatch) => {\r\n  dispatch(setLoading());\r\n  axios\r\n    .get(\"/api/logs\")\r\n    .then((res) =>\r\n      dispatch({\r\n        type: GET_LOGS,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_LOGS,\r\n        payload: err.res.data,\r\n      })\r\n    );\r\n};\r\n// export const getLogs = () => async (dispatch) => {\r\n//   try {\r\n//     setLoading();\r\n\r\n//     const res = await fetch(\"/api/logs\");\r\n//     const data = await res.json();\r\n\r\n//     dispatch({ type: GET_LOGS, payload: data.data });\r\n//   } catch (err) {\r\n//     dispatch({ type: LOGS_ERROR, payload: err });\r\n//   }\r\n// };\r\n\r\n// export const addLog = (log) => (dispatch) => {\r\n//   dispatch(setLoading());\r\n\r\n//   axios\r\n//     .post(\"/api/logs\", log)\r\n//     .then((res) =>\r\n//       dispatch({\r\n//         type: ADD_LOG,\r\n//         payload: res.data,\r\n//       })\r\n//     )\r\n//     .catch((err) =>\r\n//       dispatch({\r\n//         type: LOGS_ERROR,\r\n//         payload: err.response.statusText,\r\n//       })\r\n//     );\r\n// };\r\n\r\nexport const addLog = (log) => async (dispatch) => {\r\n  try {\r\n    setLoading();\r\n    log.date = new Date();\r\n    const res = await fetch(\"/api/logs\", {\r\n      method: \"post\",\r\n      body: JSON.stringify(log),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n    const data = await res.json();\r\n\r\n    dispatch({ type: ADD_LOG, payload: data.data });\r\n  } catch (err) {\r\n    dispatch({ type: LOGS_ERROR, payload: err });\r\n  }\r\n};\r\n\r\nexport const deleteLog = (id) => async (dispatch) => {\r\n  try {\r\n    setLoading();\r\n\r\n    await fetch(`/api/logs/${id}`, { method: \"delete\" });\r\n\r\n    dispatch({ type: DELETE_LOG, payload: id });\r\n  } catch (err) {\r\n    dispatch({ type: LOGS_ERROR, payload: err });\r\n  }\r\n};\r\n\r\n// export const deleteLog = (id) => async (dispatch) => {\r\n//   try {\r\n//     setLoading();\r\n\r\n//     await fetch(`/api/logs/${id}`, {\r\n//       method: \"delete\",\r\n//     });\r\n\r\n//     dispatch({ type: DELETE_LOG, payload: id });\r\n//   } catch (err) {\r\n//     dispatch({ type: LOGS_ERROR, payload: err });\r\n//   }\r\n// };\r\n\r\n// keep current log in order to edit\r\nexport const setCurrent = (log) => {\r\n  return {\r\n    type: SET_CURRENT,\r\n    payload: log,\r\n  };\r\n};\r\n\r\n// export const updateLog = (log) => (dispatch) => {\r\n//   setLoading();\r\n\r\n//   axios\r\n//     .put(`/api/logs/${log.id}`)\r\n//     .then((res) =>\r\n//       dispatch({\r\n//         type: UPDATE_LOG,\r\n//         payload: res.data,\r\n//       })\r\n//     )\r\n//     .catch((error) =>\r\n//       dispatch({\r\n//         type: LOGS_ERROR,\r\n//         payload: error.response.statusText,\r\n//       })\r\n//     );\r\n// };\r\n\r\nexport const updateLog = (log) => async (dispatch) => {\r\n  try {\r\n    setLoading();\r\n    const { message, attention, staff, id } = log;\r\n    log.date = new Date();\r\n    const res = await fetch(`/api/logs/${id}`, {\r\n      method: \"put\",\r\n      body: JSON.stringify({ message, attention, staff }),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n    const data = await res.json();\r\n\r\n    dispatch({ type: UPDATE_LOG, payload: data.data });\r\n  } catch (err) {\r\n    dispatch({ type: LOGS_ERROR, payload: err });\r\n  }\r\n};\r\n\r\n// export const updateLog = (log) => async (dispatch) => {\r\n//   const config = {\r\n//     headers: {\r\n//       \"Content-Type\": \"application/json\",\r\n//     },\r\n//   };\r\n\r\n//   try {\r\n//     const res = await axios.put(`/api/logs/${log._id}`, log, config);\r\n\r\n//     dispatch({\r\n//       type: UPDATE_LOG,\r\n//       payload: res.data,\r\n//     });\r\n//   } catch (err) {\r\n//     dispatch({\r\n//       type: LOGS_ERROR,\r\n//       payload: err.response.msg,\r\n//     });\r\n//   }\r\n// };\r\n\r\nexport const setLoading = () => {\r\n  return {\r\n    type: SET_LOADING,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}