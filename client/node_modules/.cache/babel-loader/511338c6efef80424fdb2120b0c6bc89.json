{"ast":null,"code":"import { GET_LOGS, SET_LOADING, LOGS_ERROR, ADD_LOG, DELETE_LOG, UPDATE_LOG, SET_CURRENT, CLEAR_CURRENT } from \"./types\";\nexport const getLogs = () => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"api/logs\");\n    const data = await res.json();\n    dispatch({\n      type: GET_LOGS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: error.res.data\n    });\n  }\n};\nexport const addLog = log => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"/logs\", {\n      method: \"POST\",\n      body: JSON.stringify(log),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: ADD_LOG,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n};\nexport const deleteLog = id => async dispatch => {\n  try {\n    setLoading();\n    await fetch(`/logs/${id}`, {\n      method: \"DELETE\"\n    });\n    dispatch({\n      type: DELETE_LOG,\n      payload: id\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGS_ERROR,\n      //since you dont have the res variable, us response\n      payload: error.response.data\n    });\n  }\n}; // keep current log in order to edit\n\nexport const setCurrent = log => {\n  return {\n    type: SET_CURRENT,\n    payload: log\n  };\n};\nexport const updateLog = log => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(`api/logs/${log.id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(log),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: UPDATE_LOG,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n};\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"sources":["C:/Users/17025/Documents/zaxximo/client/src/actions/logActions.js"],"names":["GET_LOGS","SET_LOADING","LOGS_ERROR","ADD_LOG","DELETE_LOG","UPDATE_LOG","SET_CURRENT","CLEAR_CURRENT","getLogs","dispatch","setLoading","res","fetch","data","json","type","payload","error","addLog","log","method","body","JSON","stringify","headers","err","response","statusText","deleteLog","id","setCurrent","updateLog"],"mappings":"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","sourcesContent":["import {\r\n  GET_LOGS,\r\n  SET_LOADING,\r\n  LOGS_ERROR,\r\n  ADD_LOG,\r\n  DELETE_LOG,\r\n  UPDATE_LOG,\r\n  SET_CURRENT,\r\n  CLEAR_CURRENT,\r\n} from \"./types\";\r\n\r\nexport const getLogs = () => async (dispatch) => {\r\n  try {\r\n    setLoading();\r\n\r\n    const res = await fetch(\"api/logs\");\r\n    const data = await res.json();\r\n\r\n    dispatch({\r\n      type: GET_LOGS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: LOGS_ERROR,\r\n      payload: error.res.data,\r\n    });\r\n  }\r\n};\r\nexport const addLog = (log) => async (dispatch) => {\r\n  try {\r\n    setLoading();\r\n\r\n    const res = await fetch(\"/logs\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(log),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    const data = await res.json();\r\n\r\n    dispatch({\r\n      type: ADD_LOG,\r\n      payload: data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: LOGS_ERROR,\r\n      payload: err.response.statusText,\r\n    });\r\n  }\r\n};\r\nexport const deleteLog = (id) => async (dispatch) => {\r\n  try {\r\n    setLoading();\r\n\r\n    await fetch(`/logs/${id}`, {\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    dispatch({\r\n      type: DELETE_LOG,\r\n      payload: id,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: LOGS_ERROR,\r\n      //since you dont have the res variable, us response\r\n      payload: error.response.data,\r\n    });\r\n  }\r\n};\r\n// keep current log in order to edit\r\nexport const setCurrent = (log) => {\r\n  return {\r\n    type: SET_CURRENT,\r\n    payload: log,\r\n  };\r\n};\r\nexport const updateLog = (log) => async (dispatch) => {\r\n  try {\r\n    setLoading();\r\n\r\n    const res = await fetch(`api/logs/${log.id}`, {\r\n      method: \"PUT\",\r\n      body: JSON.stringify(log),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const data = await res.json();\r\n\r\n    dispatch({\r\n      type: UPDATE_LOG,\r\n      payload: data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: LOGS_ERROR,\r\n      payload: err.response.statusText,\r\n    });\r\n  }\r\n};\r\nexport const setLoading = () => {\r\n  return {\r\n    type: SET_LOADING,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}